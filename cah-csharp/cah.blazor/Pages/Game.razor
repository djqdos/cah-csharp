@page "/game"
@layout MainLayout
@using Components.WhiteCardComponent
@using Components.BlackCardComponent

@using Microsoft.AspNetCore.SignalR.Client;
@using cah.blazor.SocketConstants;
@using cah.models;
@using cah.services.services;
@inject ICardsService _cardService
@inject HubConnection hubConnection;


<div id="game" class="center-grid">
	
	@if (_gameSettings != null && _gameSettings.GameState == GameState.Initial)
	{
		<div>
			<button @onclick="StartGame">Start Game</button>
		</div>
	}


	@if (_gameSettings != null && (_gameSettings.GameState == GameState.StartGame || _gameSettings.GameState == GameState.SetPicked))
	{
		<div>
			<cah.blazor.Components.SelectCardSetComponent.SelectCardSetComponent />
		</div>
	}


	@if (_gameSettings != null && _gameSettings.GameState == GameState.CardsDealt)
	{
		<cah.blazor.Components.DealtCardsComponent.DealtCardsComponent />
	}


</div>

<cah.blazor.Components.ChatComponent.ChatComponent />

@code {
	private List<WhiteCard> _cards;
	private BlackCard _blackCard;
	private WhiteCard _selectedCard;

	private List<string> _cardSets;
	string dropClass = "";
	private GameSettings _gameSettings;

	protected override async Task OnInitializedAsync()
	{

		//_cards = await _cardService.GetRandomWhiteCards("CAH Base Set", 1);
		//_blackCard = await _cardService.GetRandomBlackCard("CAH Base Set");

		hubConnection.On<GameSettings>(SocketConstantHelpers.GameSettings, (gameSettings) =>
		{
			_gameSettings = gameSettings;

			InvokeAsync(() => StateHasChanged());
		});


		if (hubConnection.State == HubConnectionState.Disconnected)
		{
			await hubConnection.StartAsync();
		}

		_cardSets = await _cardService.GetSets();
	}

	private async Task HandleDrop()
	{

	}

	private void HandleDragEnter()
	{
		dropClass = "droppable";
	}

	private void HandleDragLeave()
	{
		dropClass = "";
	}

	protected async Task SelectedCard(WhiteCard _card)
	{
		var bob = _card;
	}

	private async Task StartGame()
	{
		await hubConnection.SendAsync(SocketConstantHelpers.StartGame);
	}
}
