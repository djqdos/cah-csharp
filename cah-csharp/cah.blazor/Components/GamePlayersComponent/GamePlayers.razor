@using Microsoft.AspNetCore.SignalR.Client
@using cah.models
@using SocketConstants

@inject NavigationManager NavigationManager
@inject Blazored.LocalStorage.ILocalStorageService localStorage;

@* Import the scoped HubConnection *@
@inject HubConnection hubConnection;
@*@implements IAsyncDisposable*@

@if (_gameSettings != null && _gameSettings.GameUsers != null && _gameSettings.GameUsers.Any())
{
	<div class="user-list">
		@foreach (var gu in _gameSettings.GameUsers)
		{
			if (!string.IsNullOrWhiteSpace(gu.Username))
			{
				<span class="user @(gu.IsHost ? "host" : string.Empty) @(_connectionId == gu.ConnectionId ? "me" : string.Empty)">
					@gu.Username
				</span>
			}
		}
	</div>

	<div>
		Debug:
		@_gameSettings.GameState
		<br />
		<button @onclick="ResetGameData">Reset Game</button>

	</div>
}





@code {
	private string userName;
	private GameSettings _gameSettings;
	public bool IsConnected => hubConnection.State == HubConnectionState.Connected;
	private string _connectionId;

	protected override async Task OnInitializedAsync()
	{		
		hubConnection.On<GameSettings>(SocketConstantHelpers.GameSettings, (gameSettings) =>
		{
			_gameSettings = gameSettings;

			InvokeAsync(() => StateHasChanged());
		});

		if (hubConnection.State == HubConnectionState.Disconnected)
		{
			await hubConnection.StartAsync();
		}


		_connectionId = hubConnection.ConnectionId;
		await base.OnInitializedAsync();
	}


	private async Task ResetGameData()
	{
		await hubConnection.SendAsync(SocketConstantHelpers.ResetGameData);
	}


	//public async ValueTask DisposeAsync()
	//{
	//	if (hubConnection != null)
	//	{
	//		await hubConnection.DisposeAsync();
	//	}
	//}
}
